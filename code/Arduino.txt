/*
   рЃърЃарЃЮрЃњрЃарЃљрЃЏрЃБрЃџрЃў рЃЎрЃЮрЃЊрЃў, "Arduino UNO R3" рЃЊрЃљрЃцрЃљрЃќрЃћ рЃљрЃарЃАрЃћрЃЉрЃБрЃџрЃў рЃЏрЃўрЃЎрЃарЃЮрЃЎрЃЮрЃюрЃбрЃарЃЮрЃџрЃћрЃарЃўрЃАрЃЌрЃЋрЃўрЃА
*/

#include "RTClib.h"// рЃАрЃљрЃљрЃЌрЃўрЃА рЃЏрЃЮрЃЊрЃБрЃџрЃўрЃА (RTC) рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃА рЃЊрЃљрЃЏрЃљрЃбрЃћрЃЉрЃљ

#define INTERRUPT_PIN 2// рЃЏрЃБрЃЊрЃЏрЃўрЃЋрЃљ, рЃАрЃљрЃЊрЃљрЃф рЃўрЃюрЃљрЃ«рЃћрЃЉрЃљ рЃўрЃЏ рЃърЃўрЃюрЃўрЃА рЃюрЃЮрЃЏрЃћрЃарЃў, рЃарЃЮрЃЏрЃћрЃџрЃЌрЃљрЃюрЃљрЃф рЃЊрЃљрЃЎрЃљрЃЋрЃерЃўрЃарЃћрЃЉрЃБрЃџрЃўрЃљ RTC рЃЏрЃЮрЃЊрЃБрЃџрЃўрЃА SQW рЃърЃўрЃюрЃў рЃЊрЃљ рЃЏрЃўрЃЎрЃарЃЮрЃЎрЃЮрЃюрЃбрЃарЃЮрЃџрЃћрЃарЃўрЃА рЃгрЃДрЃЋрЃћрЃбрЃљ (interrupt)...

// 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃюрЃЊрЃўрЃЎрЃљрЃбрЃЮрЃарЃћрЃЉрЃўрЃА рЃЎрЃЮрЃЊрЃБрЃарЃљрЃЊ рЃЏрЃљрЃарЃЌрЃЋрЃљрЃЊрЃў рЃЏрЃўрЃЎрЃарЃЮрЃАрЃЦрЃћрЃЏрЃўрЃА (4055) рЃфрЃўрЃцрЃарЃБрЃџрЃў рЃърЃўрЃюрЃћрЃЉрЃў
#define b1 A0// рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃА рЃърЃўрЃарЃЋрЃћрЃџрЃў рЃфрЃўрЃцрЃарЃў...
#define b2 A1// рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃА рЃЏрЃћрЃЮрЃарЃћ рЃфрЃўрЃцрЃарЃў...
#define b3 A2// рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃА рЃЏрЃћрЃАрЃљрЃЏрЃћ рЃфрЃўрЃцрЃарЃў...
#define b4 A3// рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃА рЃЏрЃћрЃЮрЃЌрЃ«рЃћ рЃфрЃўрЃцрЃарЃў...

#define CLK 7// 4017 рЃЏрЃўрЃЎрЃарЃЮрЃАрЃЦрЃћрЃЏрЃўрЃА (рЃЏрЃЌрЃЋрЃџрЃћрЃџрЃў) clock рЃърЃўрЃюрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃърЃўрЃюрЃўрЃА рЃюрЃЮрЃЏрЃћрЃарЃў
#define DP 8// 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃюрЃЊрЃўрЃЎрЃљрЃбрЃЮрЃарЃўрЃА рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃюрЃў рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃърЃўрЃюрЃўрЃА рЃюрЃЮрЃЏрЃћрЃарЃў
// рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃўрЃАрЃбрЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃърЃўрЃюрЃћрЃЉрЃў
#define shiftData 4// рЃАрЃљрЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃЮ рЃърЃўрЃюрЃў...
#define shiftClock 12// рЃАрЃљрЃљрЃЌрЃўрЃА рЃАрЃўрЃ«рЃерЃўрЃарЃўрЃА рЃърЃўрЃюрЃў...
#define shiftLatch 13// рЃЕрЃљрЃЏрЃЎрЃћрЃбрЃў рЃърЃўрЃюрЃў...

// RGB рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃАрЃЌрЃЋрЃўрЃА рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃърЃўрЃюрЃћрЃЉрЃўрЃА рЃюрЃЮрЃЏрЃарЃћрЃЉрЃў
#define RGB_RED 11// рЃгрЃўрЃЌрЃћрЃџрЃў
#define RGB_GREEN 10// рЃЏрЃгрЃЋрЃљрЃюрЃћ
#define RGB_BLUE 9// рЃџрЃБрЃарЃ»рЃў

#define transistorPin 3// P рЃљрЃарЃ«рЃўрЃљрЃюрЃў рЃЋрЃћрЃџрЃўрЃА рЃбрЃарЃљрЃюрЃАрЃќрЃўрЃАрЃбрЃЮрЃарЃўрЃА (IRF5210) рЃЕрЃљрЃЏрЃЎрЃћрЃбрЃўрЃАрЃЌрЃЋрЃўрЃА (gate) рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃърЃўрЃюрЃўрЃА рЃюрЃЮрЃЏрЃћрЃарЃў
#define redPin 5// рЃЏрЃћ-2 RGB рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃгрЃўрЃЌрЃћрЃџрЃў рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃцрЃћрЃ«рЃўрЃАрЃЌрЃЋрЃўрЃА рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃърЃўрЃюрЃўрЃА рЃюрЃЮрЃЏрЃћрЃарЃў...
#define bluePin 6// рЃЏрЃћ-2 RGB рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃџрЃБрЃарЃ»рЃў рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃцрЃћрЃ«рЃўрЃАрЃЌрЃЋрЃўрЃА рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃърЃўрЃюрЃўрЃА рЃюрЃЮрЃЏрЃћрЃарЃў...

// рЃњрЃљрЃарЃЎрЃЋрЃћрЃБрЃџрЃў рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮрЃћрЃЉрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃў, 8x8 рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃбрЃљрЃюрЃљрЃЊ...
#define digit_0 {0b00111100, 0b01100110, 0b01100110, 0b01100110, 0b01100110, 0b01100110, 0b01100110, 0b00111100}// 0
#define digit_1 {0b00011000, 0b00111000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00111100}// 1
#define digit_2 {0b00000000, 0b00011000, 0b00100100, 0b00000100, 0b00001000, 0b00010000, 0b00111100, 0b00000000}// 2
#define char_space {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000}// " "
#define char_hyphen {0b00000000, 0b00000000, 0b00000000, 0b01111110, 0b01111110, 0b00000000, 0b00000000, 0b00000000}// "-"
#define letter_E {0b01111100, 0b01000000, 0b01000000, 0b01111100, 0b01000000, 0b01000000, 0b01000000, 0b01111100}// "E"
#define geo_a {0b00010000, 0b00010000, 0b00001000, 0b00000100, 0b00000010, 0b01000010, 0b01000010, 0b00111100}// "рЃљ"
#define geo_e {0b00011000, 0b00100100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00100100, 0b00011000}// "рЃћ"
#define geo_i {0b00111100, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b00100100}// "рЃў"
#define geo_l {0b00011000, 0b00100100, 0b00100000, 0b00100000, 0b00010000, 0b00001000, 0b00000100, 0b00000100}// "рЃџ"
#define geo_x {0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00111000, 0b00100100, 0b00100100, 0b00011000}// "рЃ«"

#define RTC_SQW_PIN_MODE DS1307_SquareWave1HZ// рЃЏрЃБрЃЊрЃЏрЃўрЃЋрЃљ, рЃАрЃљрЃЊрЃљрЃф рЃўрЃюрЃљрЃ«рЃћрЃЉрЃљ рЃАрЃљрЃљрЃЌрЃўрЃА рЃЏрЃЮрЃЊрЃБрЃџрЃўрЃА (RTC) SQW рЃърЃўрЃюрЃўрЃА рЃарЃћрЃЪрЃўрЃЏрЃў

// RTC рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃА рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃћрЃЉрЃў...
RTC_DS1307 rtc;
DateTime now;

volatile boolean timeChanged;// рЃфрЃЋрЃџрЃљрЃЊрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃўрЃљ рЃўрЃЏрЃўрЃА рЃЊрЃљрЃАрЃљрЃЊрЃњрЃћрЃюрЃљрЃЊ, рЃерЃћрЃўрЃфрЃЋрЃљрЃџрЃљ рЃЌрЃБ рЃљрЃарЃљ рЃЊрЃарЃЮ (RTC)...

// рЃЊрЃарЃЮрЃўрЃА рЃерЃћрЃАрЃљрЃљрЃюрЃљрЃ«рЃў рЃфрЃЋрЃџрЃљрЃЊрЃћрЃЉрЃў
byte second;
byte minute;
byte hour;

// рЃЌрЃљрЃарЃўрЃдрЃўрЃА рЃерЃћрЃАрЃљрЃюрЃљрЃ«рЃў рЃфрЃЋрЃџрЃљрЃЊрЃћрЃЉрЃў
byte day;
byte month;
int year;

byte displayIndex;// 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃюрЃЊрЃўрЃЎрЃљрЃбрЃЮрЃарЃўрЃА рЃарЃўрЃњрЃЮрЃЉрЃарЃўрЃЋрЃў рЃюрЃЮрЃЏрЃарЃўрЃА рЃерЃћрЃАрЃљрЃюрЃљрЃ«рЃў рЃфрЃЋрЃџрЃљрЃЊрЃў
byte displayDigits[6];// рЃЏрЃљрЃАрЃўрЃЋрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃўрЃюрЃљрЃ«рЃљрЃЋрЃА 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃюрЃЊрЃўрЃЎрЃљрЃбрЃЮрЃарЃћрЃЉрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃбрЃљрЃю рЃфрЃўрЃцрЃарЃћрЃЉрЃА
boolean displayDots[6] = {0, 1, 0, 1, 0, 0};// рЃЏрЃљрЃАрЃўрЃЋрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃўрЃюрЃљрЃ«рЃљрЃЋрЃА 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃюрЃЊрЃўрЃЎрЃљрЃбрЃЮрЃарЃћрЃЉрЃўрЃА рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃюрЃў рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃћрЃЉрЃўрЃА рЃџрЃЮрЃњрЃўрЃЎрЃБрЃа рЃЏрЃЊрЃњрЃЮрЃЏрЃљрЃарЃћрЃЮрЃЉрЃћрЃЉрЃА
// рЃфрЃЋрЃџрЃљрЃЊрЃћрЃЉрЃў, рЃарЃЮрЃЏрЃџрЃћрЃЉрЃўрЃф рЃўрЃюрЃљрЃ«рЃљрЃЋрЃћрЃю рЃЏрЃўрЃЏрЃЊрЃўрЃюрЃљрЃарЃћ рЃЊрЃарЃЮрЃА рЃЏрЃўрЃџрЃўрЃгрЃљрЃЏрЃћрЃЉрЃерЃў
unsigned long t;
unsigned long t2;
unsigned long t3;
unsigned long t4;
unsigned long t5;
unsigned long t6;
unsigned long t7;

int RGB_VAL;// "oneValueRGB" рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃАрЃЌрЃЋрЃўрЃА рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃњрЃџрЃЮрЃЉрЃљрЃџрЃБрЃарЃў рЃфрЃЋрЃџрЃљрЃЊрЃў
boolean RGB_VAL_DIRECTION = 1;// рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃцрЃћрЃарЃўрЃА рЃфрЃЋрЃџрЃўрЃџрЃћрЃЉрЃўрЃА рЃЏрЃўрЃЏрЃљрЃарЃЌрЃБрЃџрЃћрЃЉрЃљ...
boolean userInputTimeExpired;
boolean dateScrollEnabled;
boolean countDown;
boolean BIDIRECTIONAL_RGB_ENABLED;
byte BIDIRECTIONAL_RGB_DELAY;
boolean digitZeroDissapearEnabled;
boolean newYearScrollEnabled;
boolean snowEnabled;
byte snowMode;
int RGB_VAL1;
int RGB_VAL2;
byte SOFT_RGB_DELAY;
boolean softRandomRGBenabled;
boolean RGBrandomDelayEnabled;
byte RGB_BYTE_VALUE;
byte blinkRGBmode;
byte rand_val1;
byte rand_val2;
byte rand_val3;
boolean blinkColoursRGBenabled;
byte lineIndex;
boolean lineDirection;
boolean lineMode;
boolean matrixLineRandomIndex;
boolean matrixLinesEnabled;
boolean matrixSquareRandomIndex;
boolean matrixSquaresEnabled;
boolean matrixDotRandom;
boolean matrixDotsEnabled;
byte matrixDotNumber;
byte dotIndex;
byte dotIndex2 = 4;
boolean fallingDotsEnabled;
boolean jumpScrollDirection;
byte jumpScrollIndex;
boolean matrixSmileEnabled;
boolean matrixJumpingSmileEnabled;
byte lastSecond;
boolean matrixScrollSmileEnabled;
boolean matrix_UGLIMES_enabled;
boolean changeModeInJumpingSymbolFunction;
byte matrixRowIndex;
boolean fullMatrixScrollEnabled;
boolean blinkMicrosRGBenabled;
boolean randomRGBmode;
boolean softRGBmode;
byte countRGBmodes;
boolean whiteColourEnable;
byte RGB_COLOUR_TRANSITION_VALUE;
byte GLOBAL_RANDOM_RED_BLUE_CHANGE_DELAY_TIME;
boolean randomRedBlueEnabled;

/*
   рЃфрЃЋрЃџрЃљрЃЊрЃў, рЃарЃЮрЃЏрЃџрЃўрЃА рЃАрЃўрЃЊрЃўрЃЊрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ рЃњрЃљрЃюрЃўрЃАрЃљрЃќрЃдрЃЋрЃарЃћрЃЉрЃљ рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃбрЃљрЃюрЃўрЃџрЃў рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃўрЃА рЃърЃЮрЃќрЃўрЃфрЃўрЃљ
   рЃЏрЃљрЃА рЃерЃћрЃБрЃФрЃџрЃўрЃљ рЃерЃћрЃўрЃюрЃљрЃ«рЃЮрЃА рЃџрЃЮрЃњрЃўрЃЎрЃБрЃарЃў 1 рЃљрЃю рЃџрЃЮрЃњрЃўрЃЎрЃБрЃарЃў 0
   рЃџрЃЮрЃњрЃўрЃЎрЃБрЃарЃў 0-рЃА рЃЊрЃљ рЃџрЃЮрЃњрЃўрЃЎрЃБрЃарЃў 1-рЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃћрЃЉрЃў, рЃћрЃарЃЌрЃЏрЃљрЃюрЃћрЃЌрЃўрЃАрЃњрЃљрЃю 180┬░-рЃўрЃЌ рЃњрЃљрЃюрЃАрЃ«рЃЋрЃљрЃЋрЃЊрЃћрЃЉрЃљ
*/
boolean reverseMatrix = 0;

String received;
boolean numberScrolling;

// рЃгрЃљрЃарЃгрЃћрЃарЃљ "UG-LiMES"-рЃўрЃА рЃерЃћрЃЏрЃљрЃЊрЃњрЃћрЃюрЃћрЃџрЃў рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮрЃћрЃЉрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃў, рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃбрЃљрЃюрЃљрЃЊ
byte limes[10][8] = {
  char_space,// " "
  {0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b00111100},// U
  {0b00111100, 0b01000010, 0b01000000, 0b01000000, 0b01011110, 0b01000010, 0b01000010, 0b00111110},// G
  char_hyphen,// -
  {0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01111110},// L
  {0b00000000, 0b00010000, 0b00000000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000},// i
  {0b01000010, 0b01100110, 0b01011010, 0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b01000010},// M
  letter_E,// E
  {0b00011000, 0b00100100, 0b00100000, 0b00010000, 0b00001000, 0b00000100, 0b00100100, 0b00011000},// S
  char_space,// " "
};

// рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮ "­ЪЎѓ"-рЃА (рЃдрЃўрЃЏрЃўрЃџрЃўрЃА) рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃў, рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃбрЃљрЃюрЃљрЃЊ
byte smile[8] = {
  0b00111100, 0b01000010, 0b10100101, 0b10000001, 0b10100101, 0b10011001, 0b01000010, 0b00111100
};

// рЃгрЃљрЃарЃгрЃћрЃарЃљ "рЃўрЃБрЃ»рЃў-рЃџрЃўрЃЏрЃћрЃАрЃў"-рЃўрЃА рЃерЃћрЃЏрЃљрЃЊрЃњрЃћрЃюрЃћрЃџрЃў рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮрЃћрЃЉрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃў, рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃбрЃљрЃюрЃљрЃЊ
byte limes_geo[13][8] = {
  char_space,// " "
  geo_i,// рЃў
  {0b00110110, 0b01001010, 0b00000010, 0b00000010, 0b00000010, 0b00000010, 0b01000100, 0b00111000},// рЃБ
  {0b00001000, 0b00011000, 0b00001100, 0b00001000, 0b00000100, 0b00000100, 0b00100100, 0b00011000},// рЃ»
  geo_i,// рЃў
  char_hyphen,// -
  geo_l,// рЃџ
  geo_i,// рЃў
  {0b00011000, 0b00100100, 0b00000100, 0b00011100, 0b00100100, 0b00100100, 0b00100100, 0b00011000},// рЃЏ
  geo_e,// рЃћ
  {0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00101000, 0b00100100, 0b00100100, 0b00011000},// рЃА
  geo_i,// рЃў
  char_space// " "
};

// uglimes рЃАрЃБрЃарЃљрЃЌрЃўрЃА рЃЏрЃАрЃњрЃљрЃЋрЃАрЃў рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃўрЃА 8x8 рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃбрЃљрЃюрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў 8 рЃћрЃџрЃћрЃЏрЃћрЃюрЃбрЃўрЃљрЃюрЃў рЃЏрЃљрЃАрЃўрЃЋрЃў
byte uglimes_icon[8] = {
  0b00111100, 0b00100100, 0b00011000, 0b00111100, 0b01000010, 0b10100101, 0b10000001, 0b01111110
};

// 2 рЃњрЃљрЃюрЃќрЃЮрЃЏрЃўрЃџрЃћрЃЉрЃўрЃљрЃюрЃў рЃЏрЃљрЃАрЃўрЃЋрЃў, рЃАрЃљрЃЊрЃљрЃф рЃўрЃюрЃљрЃ«рЃћрЃЉрЃљ рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃбрЃљрЃюрЃў рЃљрЃЌрЃЮрЃЉрЃўрЃЌрЃў рЃфрЃўрЃцрЃарЃћрЃЉрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃў
byte digits[10][8] = {
  digit_0,// 0
  digit_1,// 1
  digit_2,// 2
  {0b00000000, 0b00111100, 0b00000100, 0b00000100, 0b00111100, 0b00000100, 0b00000100, 0b00111100},// 3
  {0b00000000, 0b00100100, 0b00100100, 0b00100100, 0b00111100, 0b00000100, 0b00000100, 0b00000100},// 4
  {0b00111100, 0b00100000, 0b00100000, 0b00111000, 0b00000100, 0b00000100, 0b00100100, 0b00011000},// 5
  {0b00011000, 0b00100100, 0b00100000, 0b00111000, 0b00100100, 0b00100100, 0b00100100, 0b00011000},// 6
  {0b00111100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100},// 7
  {0b00000000, 0b00011000, 0b00100100, 0b00100100, 0b00011000, 0b00100100, 0b00100100, 0b00011000},// 8
  {0b00011000, 0b00100100, 0b00100100, 0b00011100, 0b00000100, 0b00000100, 0b00100100, 0b00011000}// 9
};

// 2 рЃњрЃљрЃюрЃќрЃЮрЃЏрЃўрЃџрЃћрЃЉрЃўрЃљрЃюрЃў рЃЏрЃљрЃАрЃўрЃЋрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃўрЃљ рЃЌрЃљрЃарЃўрЃдрЃўрЃА (рЃЊрЃдрЃћ, рЃЌрЃЋрЃћ, рЃгрЃћрЃџрЃў) рЃерЃћрЃАрЃљрЃюрЃљрЃ«рЃљрЃЊ
byte date[12][8] = {
  char_space,// " "
  char_space,// рЃЊрЃдрЃћ (рЃљрЃЌрЃћрЃБрЃџрЃћрЃЉрЃў)
  char_space,// рЃЊрЃдрЃћ (рЃћрЃарЃЌрЃћрЃБрЃџрЃћрЃЉрЃў)
  char_hyphen,// рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮ "-"
  char_space,// рЃЌрЃЋрЃћ (рЃљрЃЌрЃћрЃБрЃџрЃћрЃЉрЃў)
  char_space,// рЃЌрЃЋрЃћ (рЃћрЃарЃЌрЃћрЃБрЃџрЃћрЃЉрЃў)
  char_hyphen,// рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮ "-"
  char_space,// рЃгрЃћрЃџрЃў (рЃљрЃЌрЃљрЃАрЃћрЃБрЃџрЃћрЃЉрЃў)
  char_space,// рЃгрЃћрЃџрЃў (рЃљрЃАрЃћрЃБрЃџрЃћрЃЉрЃў)
  char_space,// рЃгрЃћрЃџрЃў (рЃљрЃЌрЃћрЃБрЃџрЃћрЃЉрЃў)
  char_space,// рЃгрЃћрЃџрЃў (рЃћрЃарЃЌрЃћрЃБрЃџрЃћрЃЉрЃў)
  char_space// " "
};

byte newYear[33][8] = {
  char_space,// " "
  geo_a,// "рЃљ"
  geo_x,// "рЃ«"
  geo_a,// "рЃљ"
  geo_l,// "рЃџ"
  geo_i,// "рЃў"
  char_space,// " "
  {0b00110110, 0b00101000, 0b00100000, 0b00100000, 0b00111000, 0b00100100, 0b00100100, 0b00011000},// "рЃг"
  geo_e,// "рЃћ"
  geo_l,// "рЃџ"
  geo_i,// "рЃў"
  char_space,// " "
  digit_2,// 2
  digit_0,// 0
  digit_2,// 2
  digit_1,// 1
  char_space,// " "
  char_hyphen,// "-"
  char_space,// " "
  {0b00000000, 0b01000010, 0b01100010, 0b01010010, 0b01001010, 0b01000110, 0b01000010, 0b00000000},// "N"
  letter_E,// "E"
  {0b01000010, 0b01000010, 0b01000010, 0b01000010, 0b01011010, 0b01011010, 0b01100110, 0b01000010},// "W"
  char_space,// " "
  {0b01000010, 0b00100100, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000},// "Y"
  letter_E,// "E"
  {0b00111100, 0b01000010, 0b01000010, 0b01111110, 0b01000010, 0b01000010, 0b01000010, 0b01000010},// "A"
  {0b01111100, 0b01000010, 0b01000010, 0b01111100, 0b01000010, 0b01000010, 0b01000010, 0b01000010},// "R"
  char_space,// " "
  digit_2,// 2
  digit_0,// 0
  digit_2,// 2
  digit_1,// 1
  char_space// " "
};

// 2 рЃњрЃљрЃюрЃќрЃЮрЃЏрЃўрЃџрЃћрЃЉрЃўрЃљрЃюрЃў рЃЏрЃљрЃАрЃўрЃЋрЃў, рЃАрЃљрЃЊрЃљрЃф рЃўрЃюрЃљрЃ«рЃћрЃЉрЃљ рЃЌрЃЮрЃЋрЃџрЃўрЃА рЃцрЃўрЃцрЃЦрЃћрЃЉрЃўрЃА рЃЏрЃАрЃњрЃљрЃЋрЃАрЃў рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃћрЃЉрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃЮрЃарЃЮрЃЉрЃўрЃЌрЃў рЃЎрЃЮрЃЊрЃћрЃЉрЃў
byte snowflake[11][8] = {
  {0b00111000, 0b01010100, 0b10010010, 0b11101110, 0b10010010, 0b01010100, 0b00111000, 0b00000000},
  {0b00010000, 0b01010100, 0b00111000, 0b11101110, 0b00111000, 0b01010100, 0b00010000, 0b00000000},
  {0b00101000, 0b01010100, 0b10111010, 0b01101100, 0b10111010, 0b01010100, 0b00101000, 0b00000000},
  {0b10010010, 0b00101000, 0b01111100, 0b10101010, 0b01111100, 0b00101000, 0b10010010, 0b00000000},
  {0b00010000, 0b01101100, 0b01010100, 0b10111010, 0b01010100, 0b01101100, 0b00010000, 0b00000000},
  {0b00111000, 0b00010000, 0b10111010, 0b11101110, 0b10111010, 0b00010000, 0b00111000, 0b00000000},
  {0b10111010, 0b01101100, 0b11000110, 0b10010010, 0b11000110, 0b01101100, 0b10111010, 0b00000000},
  {0b10000010, 0b00101000, 0b01101100, 0b00010000, 0b01101100, 0b00101000, 0b10000010, 0b00000000},
  {0b01000100, 0b10101010, 0b01101100, 0b00010000, 0b01101100, 0b10101010, 0b01000100, 0b00000000},
  {0b00101000, 0b01000100, 0b10101010, 0b00010000, 0b10101010, 0b01000100, 0b00101000, 0b00000000},
  {0b00011000, 0b01011010, 0b00100100, 0b11011011, 0b11011011, 0b00100100, 0b01011010, 0b00011000}
};

byte randomNumbers[8] = {2, 6, 0, 5, 3, 7, 4, 1};// "рЃерЃћрЃЏрЃЌрЃ«рЃЋрЃћрЃЋрЃўрЃЌрЃЮрЃЉрЃўрЃА" рЃърЃарЃўрЃюрЃфрЃўрЃърЃўрЃЌ рЃгрЃўрЃюрЃљрЃАрЃгрЃљрЃа рЃерЃћрЃарЃЕрЃћрЃБрЃџрЃў рЃфрЃўрЃцрЃарЃћрЃЉрЃў

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃўрЃљ RTC рЃЏрЃЮрЃЊрЃБрЃџрЃўрЃЊрЃљрЃю рЃЊрЃарЃЮрЃА рЃЊрЃљ рЃЌрЃљрЃарЃўрЃдрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃфрЃЋрЃџрЃљрЃЊрЃћрЃЉрЃерЃў рЃерЃћрЃАрЃљрЃюрЃљрЃ«рЃљрЃЊ
void getDateTime()  {
  now = rtc.now();
  // рЃЊрЃарЃЮрЃўрЃА рЃерЃћрЃюрЃљрЃ«рЃЋрЃљ
  second = now.second();
  minute = now.minute();
  hour = now.hour();
  // рЃЌрЃљрЃарЃўрЃдрЃўрЃА рЃерЃћрЃюрЃљрЃ«рЃЋрЃљ
  day = now.day();
  month = now.month();
  year = now.year();
}

// 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃюрЃЊрЃўрЃЎрЃљрЃбрЃЮрЃарЃћрЃЉрЃќрЃћ, рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃћрЃЉрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃЋрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
void sevenSegments(byte digit, boolean DP_STATE)  {
  digitalWrite(b1, digit & (1 << 0));
  digitalWrite(b2, digit & (1 << 1));
  digitalWrite(b3, digit & (1 << 2));
  digitalWrite(b4, digit & (1 << 3));
  digitalWrite(DP, !DP_STATE);
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЌрЃўрЃЌрЃЮрЃћрЃБрЃџ 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃљрЃЋрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃћрЃЉрЃА
void multiplexSegments()  {
  sevenSegments(0b1111, 0);// 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃюрЃЊрЃўрЃЎрЃљрЃбрЃЮрЃарЃћрЃЉрЃўрЃА рЃЕрЃљрЃЦрЃарЃЮрЃЉрЃљ
  digitalWrite(CLK, 1);
  digitalWrite(CLK, 0);
  sevenSegments(displayDigits[displayIndex], displayDots[displayIndex]);
  if (++displayIndex == 6)  {
    displayIndex = 0;
  }
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃАрЃљрЃф рЃњрЃљрЃЊрЃљрЃДрЃљрЃЋрЃА рЃЊрЃарЃЮрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃў, 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃбрЃљрЃю рЃфрЃўрЃцрЃарЃћрЃЉрЃљрЃЊ
void setTime7segments()  {
  displayDigits[0] = hour / 10;// рЃАрЃљрЃљрЃЌрЃўрЃА рЃљрЃЌрЃћрЃБрЃџрЃћрЃЉрЃў
  displayDigits[1] = hour % 10;// рЃАрЃљрЃљрЃЌрЃўрЃА рЃћрЃарЃЌрЃћрЃБрЃџрЃћрЃЉрЃў
  displayDigits[2] = minute / 10;// рЃгрЃБрЃЌрЃўрЃА рЃљрЃЌрЃћрЃБрЃџрЃћрЃЉрЃў
  displayDigits[3] = minute % 10;// рЃгрЃБрЃЌрЃўрЃА рЃћрЃарЃЌрЃћрЃБрЃџрЃћрЃЉрЃў
  displayDigits[4] = second / 10;// рЃгрЃљрЃЏрЃўрЃА рЃљрЃЌрЃћрЃБрЃџрЃћрЃЉрЃў
  displayDigits[5] = second % 10;// рЃгрЃљрЃЏрЃўрЃА рЃћрЃарЃЌрЃћрЃБрЃџрЃћрЃЉрЃў
}

// рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃАрЃЌрЃљрЃю рЃЊрЃљрЃЎрЃљрЃЋрЃерЃўрЃарЃћрЃЉрЃБрЃџрЃў рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃўрЃАрЃбрЃарЃћрЃЉрЃўрЃА рЃАрЃљрЃЏрЃљрЃарЃЌрЃљрЃЋрЃљрЃЊ рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
void shiftMatrix(byte rows, byte columns, boolean bitOrder_row, boolean bitOrder_column) {
  if (reverseMatrix)  {
    // рЃЌрЃБ "reverseMatrix" рЃфрЃЋрЃџрЃљрЃЊрЃў рЃўрЃюрЃљрЃ«рЃљрЃЋрЃА рЃџрЃЮрЃњрЃўрЃЎрЃБрЃа 1-рЃА, рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃюрЃў рЃЏрЃљрЃбрЃарЃўрЃфрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃљ рЃљрЃЏрЃЮрЃЉрЃарЃБрЃюрЃЊрЃћрЃЉрЃљ 180┬░-рЃўрЃЌ...
    bitOrder_row = !bitOrder_row;
    bitOrder_column = !bitOrder_column;
  }
  digitalWrite(shiftLatch, 0);
  shiftOut(shiftData, shiftClock, bitOrder_row, rows);// рЃАрЃбрЃарЃўрЃЦрЃЮрЃюрЃћрЃЉрЃўрЃА рЃАрЃљрЃЏрЃљрЃарЃЌрЃљрЃЋрЃљрЃЊ рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃўрЃАрЃбрЃарЃўрЃАрЃЌрЃЋрЃўрЃА рЃўрЃюрЃцрЃЮрЃарЃљрЃфрЃўрЃўрЃА рЃњрЃљрЃњрЃќрЃљрЃЋрЃюрЃљ
  shiftOut(shiftData, shiftClock, bitOrder_column, columns);// рЃАрЃЋрЃћрЃбрЃћрЃЉрЃўрЃА рЃАрЃљрЃЏрЃљрЃарЃЌрЃљрЃЋрЃљрЃЊ рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃўрЃАрЃбрЃарЃўрЃАрЃЌрЃЋрЃўрЃА рЃўрЃюрЃцрЃЮрЃарЃљрЃфрЃўрЃўрЃА рЃњрЃљрЃњрЃќрЃљрЃЋрЃюрЃљ
  digitalWrite(shiftLatch, 1);
}

// рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃарЃў рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃюрЃў рЃЏрЃљрЃбрЃарЃўрЃфрЃўрЃА рЃАрЃарЃБрЃџрЃљрЃЊ рЃљрЃюрЃЌрЃћрЃЉрЃўрЃА рЃљрЃю рЃАрЃарЃБрЃџрЃљрЃЊ рЃЕрЃљрЃЦрЃарЃЮрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ (рЃцрЃБрЃюрЃЦрЃфрЃўрЃљрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃЌрЃБ рЃњрЃљрЃЊрЃљрЃћрЃфрЃљ рЃџрЃЮрЃњрЃўрЃЎрЃБрЃарЃў 1, рЃЏрЃљрЃбрЃарЃўрЃфрЃљ рЃљрЃўрЃюрЃЌрЃћрЃЉрЃљ, рЃ«рЃЮрЃџрЃЮ рЃЌрЃБ рЃџрЃЮрЃњрЃўрЃЎрЃБрЃарЃў 0 - рЃЕрЃљрЃЦрЃарЃћрЃЉрЃљ)
void fullMatrix(boolean matrixState) {
  shiftMatrix(0xFF * matrixState, 0, LSBFIRST, LSBFIRST);
}

// рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ, x рЃЊрЃљ y рЃЎрЃЮрЃЮрЃарЃЊрЃўрЃюрЃљрЃбрЃћрЃЉрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ, рЃћрЃарЃЌрЃў рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃљрЃАрЃљрЃюрЃЌрЃћрЃЉрЃљрЃЊ рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџрЃў рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
void dotMatrix(byte x, byte y)  {
  /*
     рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃЏрЃћрЃЮрЃарЃћ рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЊрЃЏрЃЮрЃфрЃћрЃЏрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃЌ рЃ«рЃЊрЃћрЃЉрЃљ рЃфрЃўрЃцрЃарЃў 1-рЃА рЃЉрЃўрЃбрЃБрЃарЃў рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃљ рЃЏрЃљрЃарЃ»рЃЋрЃюрЃўрЃЊрЃљрЃю рЃЏрЃљрЃарЃфрЃ«рЃюрЃўрЃЋ, рЃЏрЃўрЃдрЃћрЃЉрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃў рЃўрЃњрЃќрЃљрЃЋрЃюрЃћрЃЉрЃљ рЃАрЃбрЃарЃўрЃЦрЃЮрЃюрЃћрЃЉрЃўрЃА рЃАрЃљрЃЏрЃљрЃарЃЌрЃљрЃЋрЃљрЃЊ рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџ рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃўрЃАрЃбрЃарЃЌрЃљрЃю
     рЃърЃўрЃарЃЋрЃћрЃџ рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЊрЃЏрЃЮрЃфрЃћрЃЏрЃБрЃџрЃў рЃарЃўрЃфрЃЋрЃўрЃЌрЃљрЃф рЃўрЃњрЃўрЃЋрЃћ рЃ«рЃЊрЃћрЃЉрЃљ, рЃЌрЃБрЃЏрЃфрЃљ рЃЏрЃўрЃдрЃћрЃЉрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃА рЃЉрЃўрЃбрЃБрЃарЃљрЃЊ рЃерЃћрЃЉрЃарЃБрЃюрЃћрЃЉрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃў рЃўрЃњрЃќрЃљрЃЋрЃюрЃћрЃЉрЃљ рЃАрЃЋрЃћрЃбрЃћрЃЉрЃўрЃА рЃАрЃљрЃЏрЃљрЃарЃЌрЃљрЃЋрЃљрЃЊ рЃњрЃљрЃюрЃЎрЃБрЃЌрЃЋрЃюрЃўрЃџ рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃўрЃАрЃбрЃарЃЌрЃљрЃю
  */
  shiftMatrix(1 << y, ~(1 << x), LSBFIRST, LSBFIRST);
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃљрЃљрЃюрЃЌрЃћрЃЉрЃА рЃЏрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃўрЃарЃЋрЃћрЃџ рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЊрЃљрЃфрЃћрЃЏрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃА рЃўрЃюрЃЊрЃћрЃЦрЃАрЃўрЃА рЃЏрЃЦрЃЮрЃюрЃћ рЃАрЃбрЃарЃўрЃЦрЃЮрЃюрЃА, рЃЏрЃћрЃЮрЃарЃћ рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ
void rowMatrix(byte index, byte number)  {
  shiftMatrix(1 << index, ~number, LSBFIRST, MSBFIRST);
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃљрЃљрЃюрЃЌрЃћрЃЉрЃА рЃЏрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃўрЃарЃЋрЃћрЃџ рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЊрЃљрЃфрЃћрЃЏрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃА рЃўрЃюрЃЊрЃћрЃЦрЃАрЃўрЃА рЃЏрЃЦрЃЮрЃюрЃћ рЃАрЃЋрЃћрЃбрЃА, рЃЏрЃћрЃЮрЃарЃћ рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ
void columnMatrix(byte index, byte number)  {
  shiftMatrix(number, ~(1 << index), MSBFIRST, LSBFIRST);
}

// рЃЊрЃљрЃДрЃЮрЃЋрЃюрЃћрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
void delayFunction(unsigned int delayTime)  {
  /*
       рЃърЃарЃЮрЃњрЃарЃљрЃЏрЃўрЃА рЃЏрЃАрЃЋрЃџрЃћрЃџрЃЮрЃЉрЃўрЃА рЃЊрЃљрЃДрЃЮрЃЋрЃюрЃћрЃЉрЃљ, рЃљрЃЏ рЃцрЃБрЃюрЃфрЃўрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЏрЃЊрЃЮрЃфрЃћрЃЏрЃБрЃџрЃў рЃЊрЃарЃЮрЃўрЃЌ
       рЃЌрЃБрЃЏрЃфрЃљ рЃЊрЃљрЃДрЃЮрЃЋрЃюрЃћрЃЉрЃўрЃА рЃърЃћрЃарЃўрЃЮрЃЊрЃерЃў, "loopFunction" рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ рЃљрЃњрЃарЃФрЃћрЃџрЃћрЃЉрЃА рЃЏрЃБрЃерЃљрЃЮрЃЉрЃљрЃА
  */
  for (t2 = millis(); millis() - t2 <= delayTime; loopFunction());
}

// рЃЊрЃљрЃДрЃЮрЃЋрЃюрЃћрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ (рЃЏрЃўрЃЎрЃарЃЮрЃгрЃљрЃЏрЃћрЃЉрЃў)
void delayMicrosecondsFunction(unsigned int delayTime)  {
  /*
       рЃърЃарЃЮрЃњрЃарЃљрЃЏрЃўрЃА рЃЏрЃАрЃЋрЃџрЃћрЃџрЃЮрЃЉрЃўрЃА рЃЊрЃљрЃДрЃЮрЃЋрЃюрЃћрЃЉрЃљ, рЃљрЃЏ рЃцрЃБрЃюрЃфрЃўрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЏрЃЊрЃЮрЃфрЃћрЃЏрЃБрЃџрЃў рЃЊрЃарЃЮрЃўрЃЌ
       рЃЌрЃБрЃЏрЃфрЃљ рЃЊрЃљрЃДрЃЮрЃЋрЃюрЃћрЃЉрЃўрЃА рЃърЃћрЃарЃўрЃЮрЃЊрЃерЃў, "loopFunction" рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ рЃљрЃњрЃарЃФрЃћрЃџрЃћрЃЉрЃА рЃЏрЃБрЃерЃљрЃЮрЃЉрЃљрЃА
  */
  for (t2 = micros(); micros() - t2 <= delayTime; loopFunction());
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ, рЃАрЃбрЃарЃўрЃЦрЃЮрЃю-рЃАрЃбрЃарЃўрЃЦрЃЮрЃю рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃљрЃЋрЃА рЃЏрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЊрЃљрЃфрЃћрЃЏрЃБрЃџ рЃЏрЃљрЃАрЃўрЃЋрЃерЃў рЃљрЃарЃАрЃћрЃЉрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃљрЃА
void symbolMatrix(byte rows[]) {
  for (byte row = 0; row < 8; row++) {
    rowMatrix(row, rows[row]);
  }
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃбрЃћрЃЦрЃАрЃбрЃўрЃА рЃерЃћрЃЏрЃљрЃЊрЃњрЃћрЃюрЃћрЃџ рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮрЃћрЃЉрЃА рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃЏрЃљрЃарЃ»рЃЋрЃюрЃўрЃЊрЃљрЃю рЃЏрЃљрЃарЃфрЃ«рЃюрЃўрЃЋ рЃљрЃЏрЃЮрЃФрЃарЃљрЃЋрЃћрЃЉрЃА
void scrollText(byte chars[][8], byte charactersNumber, byte scrollDelayTime) {
  for (byte charIndex = 0; charIndex < (charactersNumber - 1); charIndex++) {// for рЃфрЃўрЃЎрЃџрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃњрЃљрЃЊрЃљрЃБрЃДрЃЋрЃћрЃЉрЃљ рЃЌрЃўрЃЌрЃЮрЃћрЃБрЃџ рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃЮрЃарЃЮрЃЉрЃўрЃЌ рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃА
    for (byte scroll = 1; scroll <= 8; scroll++) {
      for (t3 = millis(); millis() - t3 < scrollDelayTime; loopFunction())  {
        if (userInputTimeExpired && numberScrolling)  {
          fullMatrix(0);
          break;
        }
        for (byte row = 0; row < 8; row++) {
          rowMatrix(row, (chars[charIndex][row] << scroll) | (chars[charIndex + 1][row] >> (8 - scroll)));
        }
      }
    }
  }
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЏрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃўрЃарЃЋрЃћрЃџ рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЊрЃљрЃфрЃћрЃЏрЃБрЃџ рЃЮрЃа рЃњрЃљрЃюрЃќрЃЮрЃЏрЃўрЃџрЃћрЃЉрЃўрЃљрЃю рЃЏрЃљрЃАрЃўрЃЋрЃерЃў рЃљрЃарЃАрЃћрЃЉрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃћрЃЉрЃА, рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ, рЃќрЃћрЃЏрЃЮрЃЊрЃљрЃю рЃЦрЃЋрЃћрЃЏрЃЮрЃЌ рЃљрЃЏрЃЮрЃФрЃарЃљрЃЋрЃћрЃЉрЃА...
void scrollCharsFromTop(byte chars[][8], byte charactersNumber, byte scrollDelayTime, byte fromCorner/* 0 - рЃќрЃћрЃЏрЃЮрЃЊрЃљрЃю; 1 - рЃЏрЃљрЃарЃфрЃ«рЃћрЃюрЃљ рЃЎрЃБрЃЌрЃ«рЃўрЃЊрЃљрЃю; 2 - рЃЏрЃљрЃарЃ»рЃЋрЃћрЃюрЃљ рЃЎрЃБрЃЌрЃ«рЃўрЃЊрЃљрЃю */) {
  boolean mixedDirectionMode = 0;
  for (byte charIndex = 0; charIndex < charactersNumber; charIndex++) {// for рЃфрЃўрЃЎрЃџрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃњрЃљрЃЊрЃљрЃБрЃДрЃЋрЃћрЃЉрЃљ рЃЌрЃўрЃЌрЃЮрЃћрЃБрЃџ рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃЮрЃарЃЮрЃЉрЃўрЃЌ рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃА
    if (fromCorner == 3)  {
      mixedDirectionMode = 1;
    }
    if (mixedDirectionMode)  {
      if (++fromCorner > 2)  {
        fromCorner = 0;
      }
    }
    // рЃќрЃћрЃЏрЃЮрЃЊрЃљрЃю рЃерЃБрЃљрЃерЃў
    for (byte scroll = 1; scroll <= 8; scroll++) {
      for (t3 = millis(); millis() - t3 < scrollDelayTime; loopFunction())  {
        for (byte row = 0; row < 8; row++) {
          if (row < scroll)  {
            switch (fromCorner)  {
              case 0:
                rowMatrix(row, chars[charIndex][(scroll - 1) - row]);// рЃќрЃћрЃЏрЃЮрЃЊрЃљрЃю
                break;
              case 1:
                rowMatrix(row, chars[charIndex][(scroll - 1) - row] << (8 - scroll));// рЃЏрЃљрЃарЃфрЃ«рЃћрЃюрЃљ рЃЎрЃБрЃЌрЃ«рЃўрЃЊрЃљрЃю
                break;
              case 2:
                rowMatrix(row, chars[charIndex][(scroll - 1) - row] >> (8 - scroll));// рЃЏрЃљрЃарЃ»рЃЋрЃћрЃюрЃљ рЃЎрЃБрЃЌрЃ«рЃўрЃЊрЃљрЃю
                break;
            }
          }
          else  {
            rowMatrix(row, 0);
          }
        }
      }
    }
    // рЃерЃБрЃўрЃЊрЃљрЃю рЃЦрЃЋрЃћрЃЏрЃЮрЃЌ
    for (byte scroll = 2; scroll <= 8; scroll++) {
      for (t3 = millis(); millis() - t3 < scrollDelayTime; loopFunction())  {
        for (byte row = 0; row < 8; row++) {
          switch (fromCorner)  {
            case 0:
              rowMatrix(row + scroll, chars[charIndex][row]);// рЃќрЃћрЃЏрЃЮрЃЊрЃљрЃю
              break;
            case 1:
              rowMatrix(row + scroll, chars[charIndex][row] >> (scroll - 1));// рЃЏрЃљрЃарЃфрЃ«рЃћрЃюрЃљ рЃЎрЃБрЃЌрЃ«рЃўрЃЊрЃљрЃю
              break;
            case 2:
              rowMatrix(row + scroll, chars[charIndex][row] << (scroll - 1));// рЃЏрЃљрЃарЃ»рЃЋрЃћрЃюрЃљ рЃЎрЃБрЃЌрЃ«рЃўрЃЊрЃљрЃю
              break;
          }
        }
      }
    }
  }
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃћрЃарЃЌ рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮрЃА рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃЏрЃљрЃарЃ»рЃЋрЃюрЃўрЃЊрЃљрЃю рЃЏрЃљрЃарЃфрЃ«рЃюрЃўрЃЋ рЃљрЃЏрЃЮрЃФрЃарЃљрЃЋрЃћрЃЉрЃА
void scrollSingle(byte rows[8], byte scrollDelayTime) {
  for (byte scroll = 8; scroll > 0; scroll--) {
    for (t3 = millis(); millis() - t3 < scrollDelayTime; loopFunction())  {
      for (byte row = 0; row < 8; row++) {
        rowMatrix(row, rows[row] >> scroll);
      }
    }
  }
  for (byte scroll = 0; scroll <= 8; scroll++) {
    for (t3 = millis(); millis() - t3 < scrollDelayTime; loopFunction())  {
      for (byte row = 0; row < 8; row++) {
        rowMatrix(row, rows[row] << scroll);
      }
    }
  }
}

// рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃфрЃўрЃцрЃарЃћрЃЉрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃЋрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
void matrixDigit(byte digit)  {
  for (byte row = 0; row < 8; row++) {
    rowMatrix(row, digits[digit][row]);
  }
}

// рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ, рЃфрЃўрЃцрЃарЃў 0-рЃўрЃА "рЃерЃћрЃЏрЃЌрЃ«рЃЋрЃћрЃЋрЃўрЃЌрЃЮрЃЉрЃўрЃА" рЃърЃарЃўрЃюрЃфрЃўрЃърЃўрЃЌ рЃњрЃљрЃБрЃЕрЃўрЃюрЃљрЃарЃћрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
void randomDissapearDigitZero()  {
  byte rows[8] = digit_0;
  for (byte index = 0; index < 8; index++) {
    rows[randomNumbers[index]] = rows[randomNumbers[index]] & random(0, 256);
    for (t3 = millis(); millis() - t3 < 100; loopFunction())  {
      for (byte row = 0; row < 8; row++) {
        rowMatrix(row, rows[row]);
      }
    }
    rows[randomNumbers[index]] = 0;
  }
  fullMatrix(0);
  delayFunction(100);
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЏрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЊрЃљрЃфрЃћрЃЏрЃБрЃџ рЃфрЃўрЃцрЃарЃћрЃЉрЃА рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃЏрЃљрЃарЃ»рЃЋрЃюрЃўрЃЊрЃљрЃю рЃЏрЃљрЃарЃфрЃ«рЃюрЃўрЃЋ рЃљрЃЏрЃЮрЃФрЃарЃљрЃЋрЃћрЃЉрЃА
void scrollDigits(String receivedDigits, byte SCROLL_DELAY_TIME) {
  byte receivedDigitsLength = receivedDigits.length();
  byte digitsArray[receivedDigitsLength + 2][8];
  for (byte row_index = 0; row_index < 8; row_index++) {
    digitsArray[0][row_index] = 0;
  }
  for (byte row_index = 0; row_index < 8; row_index++) {
    digitsArray[receivedDigitsLength + 1][row_index] = 0;
  }
  for (byte digitIndex = 0; digitIndex < receivedDigitsLength; digitIndex++) {
    for (byte row_index = 0; row_index < 8; row_index++) {
      digitsArray[digitIndex + 1][row_index] = digits[String(receivedDigits.charAt(digitIndex)).toInt()][row_index];
    }
  }
  scrollText(digitsArray, receivedDigitsLength + 2, SCROLL_DELAY_TIME);
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЏрЃўрЃдрЃћрЃЉрЃБрЃџ рЃЊрЃарЃЮрЃА рЃЊрЃљ рЃЌрЃљрЃарЃўрЃдрЃА рЃљрЃЦрЃфрЃћрЃЋрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃАрЃљрЃќрЃдрЃЋрЃарЃћрЃЉрЃерЃў, рЃарЃљрЃЊрЃњрЃљрЃю рЃљрЃарЃљрЃАрЃгрЃЮрЃарЃљрЃЊ рЃњрЃљрЃЏрЃЮрЃњрЃќрЃљрЃЋрЃюрЃўрЃџрЃў рЃцрЃЮрЃарЃЏрЃљрЃбрЃўрЃА рЃерЃћрЃЏрЃЌрЃ«рЃЋрЃћрЃЋрЃљрЃерЃў, рЃЏрЃЮрЃ«рЃЊрЃћрЃА рЃЏрЃўрЃАрЃў рЃерЃћрЃАрЃгрЃЮрЃарЃћрЃЉрЃБрЃџрЃў рЃЋрЃљрЃарЃўрЃљрЃюрЃбрЃўрЃА рЃерЃћрЃюрЃљрЃ«рЃЋрЃљ...
// рЃЏрЃљрЃњрЃљрЃџрЃўрЃЌрЃљрЃЊ: "24:60:99 2019-13-32" рЃЕрЃљрЃАрЃгрЃЮрЃарЃЊрЃћрЃЉрЃљ рЃарЃЮрЃњрЃЮрЃарЃф: "23:59:59 2019-12-31"; "0:0:0 2020-0-0" -> "0:0:0 2020-1-1"; "0:0:0 2000-1-1" -> "0:0:0 2001-1-1"; "0:0:0 2100-1-1" -> "0:0:0 2099-1-1"...
// рЃерЃћрЃюрЃўрЃерЃЋрЃюрЃљ: рЃърЃарЃЮрЃћрЃЦрЃбрЃерЃў рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃБрЃџрЃў RTC рЃЏрЃЮрЃЊрЃБрЃџрЃў рЃЋрЃћрЃа рЃўрЃюрЃљрЃ«рЃљрЃЋрЃА 2000 рЃгрЃћрЃџрЃќрЃћ рЃюрЃљрЃЎрЃџрЃћрЃЉрЃА рЃЊрЃљ 2099 рЃгрЃћрЃџрЃќрЃћ рЃЏрЃћрЃбрЃА...
void sanitizeDateTimeInput()  {
  hour = constrain(hour, 0, 59);
  minute = constrain(minute, 0, 59);
  second = constrain(second, 0, 59);
  year = constrain(year, 2000, 2099);
  month = constrain(month, 1, 12);
  day = constrain(day, 0, 31);
}

// рЃЊрЃарЃЮрЃА рЃЊрЃљ рЃЌрЃљрЃарЃўрЃдрЃўрЃА рЃЊрЃљрЃДрЃћрЃюрЃћрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, "datetime" String рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ...
void setDateTime(String datetime)  {
  hour = datetime.substring(0, datetime.indexOf(':')).toInt();
  minute = datetime.substring(datetime.indexOf(':') + 1, datetime.indexOf(':', datetime.indexOf(':') + 1)).toInt();
  second = datetime.substring(datetime.indexOf(':', datetime.indexOf(':') + 1) + 1, datetime.indexOf(' ')).toInt();
  year = datetime.substring(datetime.indexOf(' ') + 1, datetime.indexOf('-')).toInt();
  month = datetime.substring(datetime.indexOf('-') + 1, datetime.indexOf('-', datetime.indexOf('-') + 1)).toInt();
  day = datetime.substring(datetime.indexOf('-', datetime.indexOf('-') + 1) + 1).toInt();
  sanitizeDateTimeInput();
  rtc.adjust(DateTime(year, month, day, hour, minute, second));
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃАрЃљрЃЊрЃљрЃф рЃ«рЃЊрЃћрЃЉрЃљ UART (Serial) рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃА рЃЏрЃљрЃарЃЌрЃЋрЃљ...
void UART_FUNCTION()  {
  if (Serial.available() && !numberScrolling)  {
    received = Serial.readString();
    if (received.charAt(0) == 'n' && !userInputTimeExpired)  {
      numberScrolling = 1;
      scrollDigits(received.substring(1), 100);
      numberScrolling = 0;
    }
    else if (received.charAt(0) == 't') {
      setDateTime(received.substring(1));
    }
  }
  else if (millis() - t4 >= 1000)  {
    Serial.print("n");
    t4 = millis();
  }
}

// RGB рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃЏрЃљрЃарЃЌрЃЋрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
void RGB(byte red, byte green, byte blue)  {// рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃћрЃЉрЃў, рЃарЃЮрЃЏрЃџрЃћрЃЉрЃўрЃф рЃерЃћрЃўрЃюрЃљрЃ«рЃљрЃЋрЃА RGB рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃерЃћрЃЏрЃљрЃЊрЃњрЃћрЃюрЃћрЃџрЃў рЃцрЃћрЃарЃћрЃЉрЃўрЃА (рЃгрЃўрЃЌрЃћрЃџрЃў, рЃЏрЃгрЃЋрЃљрЃюрЃћ, рЃџрЃБрЃарЃ»рЃў) рЃўрЃюрЃбрЃћрЃюрЃАрЃўрЃЋрЃЮрЃЉрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃА
  analogWrite(RGB_RED, red);
  analogWrite(RGB_GREEN, green);
  analogWrite(RGB_BLUE, blue);
}

// "RGB_VAL" рЃњрЃџрЃЮрЃЉрЃљрЃџрЃБрЃа рЃфрЃЋрЃџрЃљрЃЊрЃерЃў рЃљрЃарЃАрЃћрЃЉрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ, RGB рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃцрЃћрЃарЃўрЃЌ рЃњрЃљрЃюрЃљрЃЌрЃћрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
void oneValueRGB()  {
  // рЃЕрЃљрЃЏрЃЦрЃарЃљрЃџрЃў - рЃгрЃўрЃЌрЃћрЃџрЃў
  if ((RGB_VAL >= 0) && (RGB_VAL < (256)))  {
    RGB((RGB_VAL % 256), 0, 0);
  }
  // рЃгрЃўрЃЌрЃћрЃџрЃў - рЃДрЃЋрЃўрЃЌрЃћрЃџрЃў
  else if ((RGB_VAL >= (256)) && (RGB_VAL < (256 * 2)))  {
    RGB(0xFF, (RGB_VAL % 256), 0);
  }
  // рЃДрЃЋрЃўрЃЌрЃћрЃџрЃў - рЃЏрЃгрЃЋрЃљрЃюрЃћ
  else if ((RGB_VAL >= (256 * 2)) && (RGB_VAL < (256 * 3)))  {
    RGB(0xFF - (RGB_VAL % 256), 0xFF, 0);
  }
  // рЃЏрЃгрЃЋрЃљрЃюрЃћ - рЃфрЃўрЃАрЃцрЃћрЃарЃў
  else if ((RGB_VAL >= (256 * 3)) && (RGB_VAL < (256 * 4)))  {
    RGB(0, 0xFF, (RGB_VAL % 256));
  }
  // рЃфрЃўрЃАрЃцрЃћрЃарЃў - рЃџрЃБрЃарЃ»рЃў
  else if ((RGB_VAL >= (256 * 4)) && (RGB_VAL < (256 * 5)))  {
    RGB(0, 0xFF - (RGB_VAL % 256), 0xFF);
  }
  // рЃџрЃБрЃарЃ»рЃў - рЃўрЃўрЃАрЃцрЃћрЃарЃў
  else if ((RGB_VAL >= (256 * 5)) && (RGB_VAL < (256 * 6)))  {
    RGB((RGB_VAL % 256), 0, 0xFF);
  }
  // рЃўрЃўрЃАрЃцрЃћрЃарЃў - рЃгрЃўрЃЌрЃћрЃџрЃў
  else if ((RGB_VAL >= (256 * 6)) && (RGB_VAL < (256 * 7)))  {
    RGB(0xFF, 0, 0xFF - (RGB_VAL % 256));
  }
  // рЃгрЃўрЃЌрЃћрЃџрЃў - рЃЌрЃћрЃЌрЃарЃў
  else if ((RGB_VAL >= (256 * 7)) && (RGB_VAL < (256 * 8)))  {
    RGB(0xFF, RGB_VAL % 256, RGB_VAL % 256);
  }
  // рЃЌрЃћрЃЌрЃарЃў - рЃЕрЃљрЃЏрЃЦрЃарЃљрЃџрЃў
  else if ((RGB_VAL >= (256 * 8)) && (RGB_VAL < (256 * 9)))  {
    RGB(0xFF - (RGB_VAL % 256), 0xFF - (RGB_VAL % 256), 0xFF - (RGB_VAL % 256));
  }
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃфрЃЋрЃџрЃўрЃА рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃцрЃћрЃарЃА рЃ«рЃљрЃю рЃћрЃарЃЌрЃў, рЃ«рЃљрЃю рЃЏрЃћрЃЮрЃарЃћ рЃЏрЃўрЃЏрЃљрЃарЃЌрЃБрЃџрЃћрЃЉрЃўрЃЌ, рЃЏрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЊрЃљрЃфрЃћрЃЏрЃБрЃџ рЃЊрЃарЃЮрЃерЃў (рЃЏрЃўрЃџрЃўрЃгрЃљрЃЏрЃў), рЃћрЃарЃЌрЃў рЃћрЃарЃЌрЃћрЃБрЃџрЃўрЃЌ
void softBidirectionalRGB(byte changeDelay) {
  if (millis() - t5 >= changeDelay)  {
    if (RGB_VAL < 0)  {
      RGB_VAL_DIRECTION = 1;
    }
    else if (RGB_VAL > (256 * 9)) {
      RGB_VAL_DIRECTION = 0;
    }
    if (RGB_VAL_DIRECTION)  {
      RGB_VAL++;
    }
    else  {
      RGB_VAL--;
    }
    oneValueRGB();
    t5 = millis();
  }
}

void softRandomRGBsetup(int val1, int val2) {
  RGB_VAL1 = val1;
  RGB_VAL2 = val2;
  if (RGB_VAL1 > RGB_VAL2)  {
    int temp = RGB_VAL1;
    RGB_VAL1 = RGB_VAL2;
    RGB_VAL2 = temp;
  }
  RGB_VAL = RGB_VAL1;
}

void softRandomRGBloop(byte local_delayMillis)  {
  if (millis() - t5 >= local_delayMillis)  {
    if (++RGB_VAL < RGB_VAL2)  {
      oneValueRGB();
    }
    else  {
      softRandomRGBsetup(RGB_VAL2, random(0, 256 * 9));
    }
    t5 = millis();
  }
}

void blinkColoursRGB(byte local_delayMillis)  {
  if (millis() - t5 >= local_delayMillis)  {
    if (RGB_BYTE_VALUE == 0)  {
      RGB_VAL_DIRECTION = 1;
      if (++blinkRGBmode > 7)  {
        blinkRGBmode = 0;
        rand_val1 = random(1, 256);
        rand_val2 = random(1, 256);
        rand_val3 = random(1, 256);
      }
    }
    else if (RGB_BYTE_VALUE == 255) {
      RGB_VAL_DIRECTION = 0;
    }
    if (RGB_VAL_DIRECTION)  {
      RGB_BYTE_VALUE++;
    }
    else  {
      RGB_BYTE_VALUE--;
    }
    switch (blinkRGBmode)  {
      case 0:
        RGB(constrain(RGB_BYTE_VALUE, 0, rand_val1), constrain(RGB_BYTE_VALUE, 0, rand_val2), constrain(RGB_BYTE_VALUE, 0, rand_val3));
        break;
      case 1:
        RGB(RGB_BYTE_VALUE, 0, 0);
        break;
      case 2:
        RGB(RGB_BYTE_VALUE, RGB_BYTE_VALUE, 0);
        break;
      case 3:
        RGB(0, RGB_BYTE_VALUE, 0);
        break;
      case 4:
        RGB(0, RGB_BYTE_VALUE, RGB_BYTE_VALUE);
        break;
      case 5:
        RGB(0, 0, RGB_BYTE_VALUE);
        break;
      case 6:
        RGB(RGB_BYTE_VALUE, 0, RGB_BYTE_VALUE);
        break;
      case 7:
        RGB(RGB_BYTE_VALUE, RGB_BYTE_VALUE, RGB_BYTE_VALUE);
        break;
    }
    t5 = millis();
  }
}

// RGB рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃцрЃћрЃарЃўрЃА рЃюрЃћрЃџрЃў рЃфрЃЋрЃџрЃўрЃџрЃћрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ...
void RGBcoloursTransition(unsigned long delayTime) {
  if (millis() - t5 >= delayTime) {
    // рЃгрЃўрЃЌрЃћрЃџрЃў-рЃДрЃЋрЃўрЃЌрЃћрЃџрЃў
    if (countRGBmodes == 0)  {
      RGB(255, RGB_COLOUR_TRANSITION_VALUE, 0);
    }
    // рЃДрЃЋрЃўрЃЌрЃћрЃџрЃў-рЃЏрЃгрЃЋрЃљрЃюрЃћ
    else if (countRGBmodes == 1) {
      RGB(255 - RGB_COLOUR_TRANSITION_VALUE, 255, 0);
    }
    // рЃЏрЃгрЃЋрЃљрЃюрЃћ-рЃфрЃўрЃАрЃцрЃћрЃарЃў
    else if (countRGBmodes == 2) {
      RGB(0, 255, RGB_COLOUR_TRANSITION_VALUE);
    }
    // рЃфрЃўрЃАрЃцрЃћрЃарЃў-рЃџрЃБрЃарЃ»рЃў
    else if (countRGBmodes == 3) {
      RGB(0, 255 - RGB_COLOUR_TRANSITION_VALUE, 255);
    }
    // рЃџрЃБрЃарЃ»рЃў-рЃўрЃўрЃАрЃцрЃћрЃарЃў
    else if (countRGBmodes == 4) {
      RGB(RGB_COLOUR_TRANSITION_VALUE, 0, 255);
    }
    // рЃўрЃўрЃАрЃцрЃћрЃарЃў-рЃгрЃўрЃЌрЃћрЃџрЃў
    else if (countRGBmodes == 5) {
      RGB(255, 0, 255 - RGB_COLOUR_TRANSITION_VALUE);
    }
    else if (whiteColourEnable) {
      // рЃгрЃўрЃЌрЃћрЃџрЃў-рЃЌрЃћрЃЌрЃарЃў
      if (countRGBmodes == 6)  {
        RGB(255, RGB_COLOUR_TRANSITION_VALUE, RGB_COLOUR_TRANSITION_VALUE);
      }
      // рЃЌрЃћрЃЌрЃарЃў-рЃДрЃЋрЃўрЃЌрЃћрЃџрЃў
      else  {
        RGB(255, 255, 255 - RGB_COLOUR_TRANSITION_VALUE);
      }
    }
    if (++RGB_COLOUR_TRANSITION_VALUE == 0)  {
      ++countRGBmodes;// рЃўрЃќрЃарЃЊрЃћрЃЉрЃљ "countRGBmodes" рЃфрЃџрЃљрЃЊрЃўрЃА рЃАрЃўрЃЊрЃўрЃЊрЃћ 1 рЃћрЃарЃЌрЃћрЃБрЃџрЃўрЃЌ
      if (countRGBmodes == 6)  {
        whiteColourEnable = !whiteColourEnable;// "whiteColourEnable" рЃфрЃЋрЃџрЃљрЃЊрЃўрЃА рЃџрЃЮрЃњрЃўрЃЎрЃБрЃарЃў рЃерЃћрЃЉрЃарЃБрЃюрЃћрЃЉрЃљ
      }
      if ((countRGBmodes > 5) && !whiteColourEnable)  {
        countRGBmodes = 0;
      }
      else if (countRGBmodes > 7)  {
        countRGBmodes = 1;
      }
    }
    t5 = millis();
  }
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃџрЃЮрЃњрЃўрЃЎрЃБрЃа 1-рЃА рЃўрЃЏ рЃерЃћрЃЏрЃЌрЃ«рЃЋрЃћрЃЋрЃљрЃерЃў, рЃЌрЃБ рЃЏрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃћрЃЉрЃљрЃЊ рЃњрЃљрЃЊрЃљрЃфрЃћрЃЏрЃБрЃџрЃў рЃЊрЃарЃЮ рЃЊрЃљ рЃЌрЃљрЃарЃўрЃдрЃў рЃБрЃЊрЃарЃўрЃА рЃЏрЃўрЃЏрЃЊрЃўрЃюрЃљрЃарЃћ рЃЊрЃарЃЮрЃА рЃЊрЃљ рЃЌрЃљрЃарЃўрЃдрЃА.. рЃгрЃўрЃюрЃљрЃљрЃдрЃЏрЃЊрЃћрЃњ рЃерЃћрЃЏрЃЌрЃ«рЃЋрЃћрЃЋрЃљрЃерЃў, рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃџрЃЮрЃњрЃўрЃЎрЃБрЃа 0-рЃА..
boolean datetime_equals(byte local_second, byte local_minute, byte local_hour, byte local_day, byte local_month, int local_year) {
  return ((second == local_second) && (minute == local_minute) && (hour == local_hour) && (day == local_day) && (month == local_month) && (year == local_year));
}

// рЃЌрЃљрЃарЃўрЃдрЃўрЃА рЃЏрЃљрЃАрЃўрЃЋрЃўрЃА рЃфрЃўрЃцрЃарЃћрЃЉрЃўрЃЌ рЃерЃћрЃЋрЃАрЃћрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃЏрЃўрЃАрЃЌрЃЋрЃўрЃА рЃњрЃљрЃЊрЃљрЃфрЃћрЃЏрЃБрЃџрЃў рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃћрЃЉрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ
void fillDateArrayWithDigitsArray(byte dateArrayIndex, byte digitsArrayIndex) {
  for (byte local_index = 0; local_index < 8; local_index++) {
    date[dateArrayIndex][local_index] = digits[digitsArrayIndex][local_index];
  }
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЏрЃўрЃАрЃЌрЃЋрЃўрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃћрЃЉрЃљрЃЊ рЃњрЃљрЃЊрЃљрЃфрЃћрЃЏрЃБрЃџ рЃЌрЃљрЃарЃўрЃдрЃА (рЃЊрЃдрЃћ, рЃЌрЃЋрЃћ, рЃгрЃћрЃџрЃў) рЃњрЃљрЃЏрЃЮрЃўрЃбрЃљрЃюрЃА рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ, рЃЏрЃљрЃарЃ»рЃЋрЃюрЃўрЃЊрЃљрЃю рЃЏрЃљрЃарЃфрЃ«рЃюрЃўрЃЋ.. рЃњрЃљрЃЏрЃЮрЃАрЃљрЃ«рЃБрЃџрЃћрЃЉрЃўрЃА рЃЊрЃљрЃДрЃЮрЃЋрЃюрЃћрЃЉрЃўрЃА рЃЊрЃарЃЮ (рЃЏрЃўрЃџрЃўрЃгрЃљрЃЏрЃў), рЃцрЃБрЃюрЃЦрЃфрЃўрЃљрЃА "local_scrollDelayTime" рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃљрЃЊ рЃњрЃљрЃЊрЃљрЃћрЃфрЃћрЃЏрЃљ..
void scrollDate(byte local_day, byte local_month, int local_year, byte local_scrollDelayTime) {
  fillDateArrayWithDigitsArray(1, local_day / 10);// рЃЊрЃдрЃћ (рЃърЃўрЃарЃЋрЃћрЃџрЃў рЃфрЃўрЃцрЃарЃў)
  fillDateArrayWithDigitsArray(2, local_day % 10);// рЃЊрЃдрЃћ (рЃЏрЃћрЃЮрЃарЃћ рЃфрЃўрЃцрЃарЃў)
  fillDateArrayWithDigitsArray(4, local_month / 10);// рЃЌрЃЋрЃћ (рЃърЃўрЃарЃЋрЃћрЃџрЃў рЃфрЃўрЃцрЃарЃў)
  fillDateArrayWithDigitsArray(5, local_month % 10);// рЃЌрЃЋрЃћ (рЃЏрЃћрЃЮрЃарЃћ рЃфрЃўрЃцрЃарЃў)
  fillDateArrayWithDigitsArray(7, local_year / 1000);// рЃгрЃћрЃџрЃў (рЃърЃўрЃарЃЋрЃћрЃџрЃў рЃфрЃўрЃцрЃарЃў)
  fillDateArrayWithDigitsArray(8, (local_year / 100) % 10);// рЃгрЃћрЃџрЃў (рЃЏрЃћрЃЮрЃарЃћ рЃфрЃўрЃцрЃарЃў)
  fillDateArrayWithDigitsArray(9, (local_year / 10) % 10);// рЃгрЃћрЃџрЃў (рЃЏрЃћрЃАрЃљрЃЏрЃћ рЃфрЃўрЃцрЃарЃў)
  fillDateArrayWithDigitsArray(10, local_year % 10);// рЃгрЃћрЃџрЃў (рЃЏрЃћрЃЮрЃЌрЃ«рЃћ рЃфрЃўрЃцрЃарЃў)
  scrollText(date, 12, local_scrollDelayTime);// "scrollText" рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃњрЃљрЃЏрЃЮрЃФрЃљрЃ«рЃћрЃЉрЃљ...
}

void bidirectionalMatrixLine(byte minIndex, byte maxIndex)  {
  if (lineIndex == minIndex)  {
    lineDirection = 1;
  }
  else if (lineIndex == maxIndex) {
    lineDirection = 0;
  }
  if (lineDirection)  {
    lineIndex++;
  }
  else  {
    lineIndex--;
  }
}

void matrixLines()  {
  if (millis() - t6 >= 100)  {
    if (!matrixLineRandomIndex)  {
      bidirectionalMatrixLine(0, 7);
    }
    else  {
      lineIndex = random(0, 8);
    }
    if (!lineMode)  {
      rowMatrix(lineIndex, 0xFF);
    }
    else  {
      columnMatrix(lineIndex, 0xFF);
    }
    t6 = millis();
  }
}

void matrixSquares() {
  if (millis() - t6 >= 100)  {
    if (!matrixSquareRandomIndex)  {
      bidirectionalMatrixLine(0, 3);
    }
    else  {
      lineIndex = random(0, 4);
    }
    t6 = millis();
  }
  rowMatrix(lineIndex, (0xFF << lineIndex) & (0xFF >> lineIndex));
  columnMatrix(lineIndex, (0xFF << lineIndex) & (0xFF >> lineIndex));
  rowMatrix(7 - lineIndex, (0xFF << lineIndex) & (0xFF >> lineIndex));
  columnMatrix(7 - lineIndex, (0xFF << lineIndex) & (0xFF >> lineIndex));
}

void matrixDots() {
  if (millis() - t6 >= 25)  {
    if (!matrixDotRandom)  {
      if (++matrixDotNumber > 63)  {
        matrixDotNumber = 0;
      }
      if ((matrixDotNumber / 8) % 2)
        dotMatrix(7 - (matrixDotNumber % 8), matrixDotNumber / 8);
      else
        dotMatrix(matrixDotNumber % 8, matrixDotNumber / 8);
    }
    else  {
      dotMatrix(random(0, 8), random(0, 8));
    }
    t6 = millis();
  }
}

void matrixFallingDotsOnInclinedPlane() {
  if (millis() - t6 >= 100)  {
    if (++dotIndex > 8)  {
      dotIndex = 0;
    }
    if (++dotIndex2 > 8)  {
      dotIndex2 = 0;
    }
    t6 = millis();
  }
  bidirectionalMatrixLine(0, 7);
  dotMatrix(dotIndex + 1, dotIndex);
  dotMatrix(dotIndex2 + 1, dotIndex2);
  rowMatrix(lineIndex, 0xFF << 7 - lineIndex);
}

void matrixJumpSymbol(byte chars[], byte scrollDelayTime) {
  if (jumpScrollIndex == 0)  {
    jumpScrollDirection = 1;
  }
  else if (jumpScrollIndex == 8) {
    jumpScrollDirection = 0;
  }
  if (jumpScrollDirection)  {
    jumpScrollIndex++;
  }
  else  {
    jumpScrollIndex--;
  }
  for (t3 = millis(); millis() - t3 < scrollDelayTime; loopFunction())  {
    for (byte row = 0; row < 8; row++) {
      if (row < jumpScrollIndex)  {
        rowMatrix(row, chars[7 - ((jumpScrollIndex - 1) - row)]);
      }
      else  {
        rowMatrix(row, 0);
      }
    }
  }
}

void fullMatrixScroll() {
  if (millis() - t6 >= 75)  {
    if (lineIndex > 0) {
      lineIndex--;
      fullMatrix(0);
    }
    t6 = millis();
  }
  for (matrixRowIndex = 0; matrixRowIndex < lineIndex; matrixRowIndex++) {
    rowMatrix(matrixRowIndex, 0xFF);
  }
}

void randomRedBlue(byte changeDelayTime)  {
  if (millis() - t7 >= changeDelayTime)  {
    analogWrite(redPin, random(0, 256));
    analogWrite(bluePin, random(0, 256));
    t7 = millis();
  }
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃАрЃљрЃЊрЃљрЃф рЃЊрЃарЃЮрЃА рЃЊрЃљ рЃЌрЃљрЃарЃўрЃдрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ рЃ«рЃЊрЃћрЃЉрЃљ рЃћрЃџрЃћрЃЦрЃбрЃарЃБрЃџрЃў рЃАрЃЦрЃћрЃЏрЃўрЃА рЃЏрЃљрЃарЃЌрЃЋрЃљ...
void functionDateTime() {
  if (datetime_equals(0, 59, 23, 31, 12, 2020))  {// рЃЌрЃБ рЃЊрЃарЃЮ рЃЊрЃљ рЃЌрЃљрЃарЃўрЃдрЃў рЃљрЃарЃўрЃА 2020-12-31 23:59:00
    userInputTimeExpired = 1;// рЃБрЃЦрЃЏрЃЊрЃћрЃЉрЃљ рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃю рЃЏрЃљрЃбрЃарЃўрЃфрЃљрЃќрЃћ рЃњрЃљрЃЏрЃЮрЃАрЃљрЃбрЃљрЃюрЃў рЃарЃўрЃфрЃ«рЃЋрЃћрЃЉрЃўрЃА NodeMCU-рЃЊрЃљрЃю рЃЏрЃўрЃдрЃћрЃЉрЃљ
  }
  else if (datetime_equals(1, 59, 23, 31, 12, 2020))  {
    dateScrollEnabled = 1;
  }
  else if (datetime_equals(30, 59, 23, 31, 12, 2020)) {
    dateScrollEnabled = 0;
  }
  else if (datetime_equals(51, 59, 23, 31, 12, 2020)) {
    countDown = 1;
  }
  else if (datetime_equals(0, 0, 0, 1, 1, 2021)) {
    randomSeed(now.unixtime());
    BIDIRECTIONAL_RGB_DELAY = 10;
    BIDIRECTIONAL_RGB_ENABLED = 1;
  }
  else if (datetime_equals(1, 0, 0, 1, 1, 2021) && countDown) {
    countDown = 0;
    digitZeroDissapearEnabled = 1;
  }
  else if (datetime_equals(2, 0, 0, 1, 1, 2021)) {
    dateScrollEnabled = 1;
  }
  else if (datetime_equals(15, 0, 0, 1, 1, 2021)) {
    dateScrollEnabled = 0;
    newYearScrollEnabled = 1;
  }
  else if (datetime_equals(0, 1, 0, 1, 1, 2021)) {
    BIDIRECTIONAL_RGB_DELAY = 1;
    newYearScrollEnabled = 0;
    matrixLinesEnabled = 1;
  }
  else if (datetime_equals(15, 1, 0, 1, 1, 2021)) {
    lineMode = 1;
  }
  else if (datetime_equals(23, 1, 0, 1, 1, 2021)) {
    lineMode = 0;
    matrixLineRandomIndex = 1;
  }
  else if (datetime_equals(30, 1, 0, 1, 1, 2021)) {
    BIDIRECTIONAL_RGB_ENABLED = 0;
    softRandomRGBsetup(random(0, 256 * 9), random(0, 256 * 9));
    SOFT_RGB_DELAY = 1;
    softRandomRGBenabled = 1;
  }
  else if (datetime_equals(31, 1, 0, 1, 1, 2021)) {
    lineMode = 1;
  }
  else if (datetime_equals(39, 1, 0, 1, 1, 2021)) {
    matrixLinesEnabled = 0;
    matrixSquaresEnabled = 1;
  }
  else if (datetime_equals(45, 1, 0, 1, 1, 2021)) {
    RGBrandomDelayEnabled = 1;
  }
  else if (datetime_equals(47, 1, 0, 1, 1, 2021)) {
    matrixSquareRandomIndex = 1;
  }
  else if (datetime_equals(55, 1, 0, 1, 1, 2021)) {
    matrixSquaresEnabled = 0;
    matrixDotsEnabled = 1;
  }
  else if (datetime_equals(0, 2, 0, 1, 1, 2021)) {
    softRandomRGBenabled = 0;
    RGB_VAL_DIRECTION = 1;
    SOFT_RGB_DELAY = 4;
    blinkColoursRGBenabled = 1;
  }
  else if (datetime_equals(3, 2, 0, 1, 1, 2021)) {
    matrixDotRandom = 1;
  }
  else if (datetime_equals(11, 2, 0, 1, 1, 2021)) {
    matrixDotsEnabled = 0;
    fallingDotsEnabled = 1;
  }
  else if (datetime_equals(19, 2, 0, 1, 1, 2021)) {
    fallingDotsEnabled = 0;
    snowEnabled = 1;
  }
  else if (datetime_equals(30, 2, 0, 1, 1, 2021)) {
    SOFT_RGB_DELAY = 1;
  }
  else if (datetime_equals(34, 2, 0, 1, 1, 2021)) {
    snowMode = 1;// рЃЌрЃЮрЃЋрЃџрЃўрЃА рЃцрЃўрЃцрЃЦрЃћрЃЉрЃў рЃЏрЃљрЃарЃфрЃ«рЃюрЃўрЃЊрЃљрЃю...
  }
  else if (datetime_equals(45, 2, 0, 1, 1, 2021)) {
    blinkColoursRGBenabled = 0;
    randomRGBmode = 1;
  }
  else if (datetime_equals(49, 2, 0, 1, 1, 2021)) {
    snowMode = 2;// рЃЌрЃЮрЃЋрЃџрЃўрЃА рЃцрЃўрЃцрЃЦрЃћрЃЉрЃў рЃЏрЃљрЃарЃ»рЃЋрЃюрЃўрЃЊрЃљрЃю...
  }
  else if (datetime_equals(0, 3, 0, 1, 1, 2021)) {
    randomRGBmode = 0;
    blinkMicrosRGBenabled = 1;
  }
  else if (datetime_equals(4, 3, 0, 1, 1, 2021)) {
    snowMode = 3;// рЃЌрЃЮрЃЋрЃџрЃўрЃА рЃцрЃўрЃцрЃЦрЃћрЃЉрЃў рЃерЃћрЃарЃћрЃБрЃџрЃў рЃЏрЃўрЃЏрЃљрЃарЃЌрЃБрЃџрЃћрЃЉрЃћрЃЉрЃўрЃЊрЃљрЃю...
  }
  else if (datetime_equals(15, 3, 0, 1, 1, 2021)) {
    GLOBAL_RANDOM_RED_BLUE_CHANGE_DELAY_TIME = 200;
    randomRedBlueEnabled = 1;
  }
  else if (datetime_equals(25, 3, 0, 1, 1, 2021)) {
    digitalWrite(transistorPin, 0);
  }
  else if (datetime_equals(40, 3, 0, 1, 1, 2021)) {
    GLOBAL_RANDOM_RED_BLUE_CHANGE_DELAY_TIME = 100;
  }
  else if (datetime_equals(55, 3, 0, 1, 1, 2021)) {
    GLOBAL_RANDOM_RED_BLUE_CHANGE_DELAY_TIME = 50;
  }
  else if (datetime_equals(10, 4, 0, 1, 1, 2021)) {
    GLOBAL_RANDOM_RED_BLUE_CHANGE_DELAY_TIME = 25;
  }
  else if (datetime_equals(25, 4, 0, 1, 1, 2021)) {
    GLOBAL_RANDOM_RED_BLUE_CHANGE_DELAY_TIME = 10;
  }
  else if (datetime_equals(30, 4, 0, 1, 1, 2021)) {
    GLOBAL_RANDOM_RED_BLUE_CHANGE_DELAY_TIME = 250;
  }
  else if (datetime_equals(31, 4, 0, 1, 1, 2021)) {
    snowEnabled = 0;
    matrixSmileEnabled = 1;
  }
  else if (datetime_equals(42, 4, 0, 1, 1, 2021)) {
    matrixSmileEnabled = 0;
    jumpScrollIndex = 8;
    matrixJumpingSmileEnabled = 1;
  }
  else if (datetime_equals(52, 4, 0, 1, 1, 2021)) {
    blinkMicrosRGBenabled = 0;
    matrixJumpingSmileEnabled = 0;
    fullMatrix(1);
  }
  else if (datetime_equals(53, 4, 0, 1, 1, 2021)) {
    lineIndex = 8;
    fullMatrixScrollEnabled = 1;
  }
  else if (datetime_equals(54, 4, 0, 1, 1, 2021)) {
    fullMatrixScrollEnabled = 0;
    matrixJumpingSmileEnabled = 0;
    softRGBmode = 1;
    matrix_UGLIMES_enabled = 1;
  }
}

// рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃАрЃљрЃЊрЃљрЃф рЃгрЃћрЃарЃўрЃљ рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃћрЃЉрЃў, рЃарЃЮрЃЏрЃџрЃћрЃЉрЃўрЃф рЃБрЃгрЃДрЃЋрЃћрЃбрЃљрЃЊ рЃАрЃарЃБрЃџрЃЊрЃћрЃЉрЃљ...
void loopFunction() {
  // рЃДрЃЮрЃЋрЃћрЃџ 1 рЃгрЃљрЃЏрЃерЃў, рЃ«рЃЊрЃћрЃЉрЃљ рЃЊрЃарЃЮрЃўрЃА рЃЊрЃљ рЃЌрЃљрЃарЃўрЃдрЃўрЃА рЃЏрЃўрЃдрЃћрЃЉрЃљ RTC рЃЏрЃЮрЃЊрЃБрЃџрЃўрЃЊрЃљрЃю рЃЊрЃљ рЃЊрЃарЃЮрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃфрЃўрЃцрЃарЃћрЃЉрЃў рЃўрЃюрЃљрЃ«рЃћрЃЉрЃљ "displayDigits" рЃЏрЃљрЃАрЃўрЃЋрЃерЃў, 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃюрЃЊрЃўрЃЎрЃљрЃбрЃЮрЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА
  if (timeChanged)  {
    getDateTime();
    setTime7segments();
    Serial.print('t' + String(hour) + ':' + String(minute) + ':' + String(second) + ' ' + String(year) + '-' + String(month) + '-' + String(day));
    timeChanged = 0;
  }

  if (millis() - t >= 1)  {// рЃљрЃЏ рЃцрЃўрЃњрЃБрЃарЃБрЃџ рЃцрЃарЃЕрЃ«рЃўрЃџрЃћрЃЉрЃерЃў рЃЕрЃљрЃгрЃћрЃарЃўрЃџрЃў рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃћрЃЉрЃў рЃерЃћрЃАрЃарЃБрЃџрЃЊрЃћрЃЉрЃљ рЃДрЃЮрЃЋрЃћрЃџ 1 рЃЏрЃўрЃџрЃўрЃгрЃљрЃЏрЃерЃў
    multiplexSegments();// "multiplexSegments" рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃњрЃљрЃЏрЃЮрЃФрЃљрЃ«рЃћрЃЉрЃљ
    t = millis();
  }
  if (lastSecond != second)  {
    functionDateTime();
    lastSecond = second;
  }
  UART_FUNCTION();
  if (BIDIRECTIONAL_RGB_ENABLED)  {
    softBidirectionalRGB(BIDIRECTIONAL_RGB_DELAY);
  }
  else if (softRandomRGBenabled) {
    if (RGBrandomDelayEnabled)  {
      SOFT_RGB_DELAY = random(1, 25);
    }
    softRandomRGBloop(SOFT_RGB_DELAY);
  }
  else if (blinkColoursRGBenabled) {
    blinkColoursRGB(SOFT_RGB_DELAY);
  }
  else if (blinkMicrosRGBenabled) {
    RGB_VAL = (micros() / 500) % (256 * 9);
    oneValueRGB();
  }
  else if (randomRGBmode) {
    if (millis() - t5 >= 100)  {
      RGB(random(0, 256), random(0, 256), random(0, 256));
      t5 = millis();
    }
  }
  else if (fullMatrixScrollEnabled) {
    RGB_VAL = (micros() / 250) % (256 * 9);
    oneValueRGB();
  }
  else if (softRGBmode) {
    RGBcoloursTransition(10);
  }
  if (randomRedBlueEnabled)  {
    randomRedBlue(GLOBAL_RANDOM_RED_BLUE_CHANGE_DELAY_TIME);
  }
}

// рЃгрЃДрЃЋрЃћрЃбрЃўрЃА (interrupt) рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ...
void timeChanged_ISR()  {
  timeChanged = 1;
}

void setup()  {
  Serial.begin(115200);// UART рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃА рЃЊрЃљрЃгрЃДрЃћрЃЉрЃљ 115200kb/s (1000 рЃЉрЃўрЃбрЃў рЃгрЃљрЃЏрЃерЃў) рЃАрЃўрЃЕрЃЦрЃљрЃарЃўрЃЌ
  Serial.setTimeout(2);// UART рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃЌ рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃўрЃА рЃЏрЃўрЃдрЃћрЃЉрЃўрЃАрЃљрЃА, рЃџрЃЮрЃЊрЃўрЃюрЃўрЃА рЃЊрЃарЃЮ рЃўрЃЦрЃюрЃћрЃЉрЃљ 2 рЃЏрЃўрЃџрЃўрЃгрЃљрЃЏрЃў (0.002 рЃгрЃљрЃЏрЃў).. рЃћрЃА рЃгрЃћрЃАрЃў рЃљрЃа рЃћрЃ«рЃћрЃЉрЃљ рЃўрЃАрЃћрЃЌ рЃерЃћрЃЏрЃЌрЃ«рЃЋрЃћрЃЋрЃћрЃЉрЃА, рЃарЃЮрЃфрЃљ рЃ«рЃЊрЃћрЃЉрЃљ рЃЏрЃ«рЃЮрЃџрЃЮрЃЊ 1 рЃАрЃўрЃЏрЃЉрЃЮрЃџрЃЮрЃА рЃљрЃЏрЃЮрЃЎрЃўрЃЌрЃ«рЃЋрЃљ (рЃЏрЃљрЃњрЃљрЃџрЃўрЃЌрЃљрЃЊ Serial.read() рЃЉрЃарЃФрЃљрЃюрЃћрЃЉрЃљ)..
  rtc.begin();// RTC рЃЏрЃЮрЃЊрЃБрЃџрЃАрЃљ рЃЊрЃљ рЃЏрЃўрЃЎрЃарЃЮрЃЎрЃЮрЃюрЃбрЃарЃЮрЃџрЃћрЃарЃА рЃерЃЮрЃарЃўрЃА рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃА рЃЊрЃљрЃгрЃДрЃћрЃЉрЃљ
  // 4055 рЃЏрЃўрЃЎрЃарЃЮрЃАрЃЦрЃћрЃЏрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃърЃўрЃюрЃћрЃЉрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃЋрЃљрЃџ рЃърЃўрЃюрЃћрЃЉрЃљрЃЊ рЃњрЃљрЃЏрЃЮрЃфрЃ«рЃљрЃЊрЃћрЃЉрЃљ
  pinMode(b1, OUTPUT);
  pinMode(b2, OUTPUT);
  pinMode(b3, OUTPUT);
  pinMode(b4, OUTPUT);

  // RGB рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃърЃўрЃюрЃћрЃЉрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃЋрЃљрЃџ рЃърЃўрЃюрЃћрЃЉрЃљрЃЊ рЃњрЃљрЃЏрЃЮрЃфрЃ«рЃљрЃЊрЃћрЃЉрЃљ
  pinMode(RGB_RED, OUTPUT);
  pinMode(RGB_GREEN, OUTPUT);
  pinMode(RGB_BLUE, OUTPUT);

  pinMode(CLK, OUTPUT);// 4017 рЃЏрЃўрЃЎрЃарЃЮрЃАрЃЦрЃћрЃЏрЃўрЃА (рЃЏрЃЌрЃЋрЃџрЃћрЃџрЃў) clock рЃърЃўрЃюрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃърЃўрЃюрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃЋрЃљрЃџ рЃърЃўрЃюрЃљрЃЊ рЃњрЃљрЃЏрЃЮрЃфрЃ«рЃљрЃЊрЃћрЃЉрЃљ
  pinMode(DP, OUTPUT);// 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃюрЃЊрЃўрЃЎрЃљрЃбрЃЮрЃарЃўрЃА рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃюрЃў рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃърЃўрЃюрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃЋрЃљрЃџ рЃърЃўрЃюрЃљрЃЊ рЃњрЃљрЃЏрЃЮрЃфрЃ«рЃљрЃЊрЃћрЃЉрЃљ
  pinMode(shiftData, OUTPUT);// рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃўрЃАрЃбрЃарЃўрЃА рЃАрЃљрЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃЮ рЃърЃўрЃюрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃърЃўрЃюрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃЋрЃљрЃџ рЃърЃўрЃюрЃљрЃЊ рЃњрЃљрЃЏрЃЮрЃфрЃ«рЃљрЃЊрЃћрЃЉрЃљ
  pinMode(shiftClock, OUTPUT);// рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃўрЃАрЃбрЃарЃўрЃА рЃАрЃљрЃљрЃЌрЃўрЃА рЃАрЃўрЃ«рЃерЃўрЃарЃўрЃА рЃърЃўрЃюрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃърЃўрЃюрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃЋрЃљрЃџ рЃърЃўрЃюрЃљрЃЊ рЃњрЃљрЃЏрЃЮрЃфрЃ«рЃљрЃЊрЃћрЃЉрЃљ
  pinMode(shiftLatch, OUTPUT);// рЃгрЃљрЃюрЃљрЃфрЃЋрЃџрЃћрЃЉрЃўрЃА рЃарЃћрЃњрЃўрЃАрЃбрЃарЃўрЃА рЃЕрЃљрЃЏрЃЎрЃћрЃбрЃў рЃърЃўрЃюрЃўрЃА рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃАрЃў рЃърЃўрЃюрЃўрЃА рЃњрЃљрЃЏрЃЮрЃАрЃљрЃЋрЃљрЃџ рЃърЃўрЃюрЃљрЃЊ рЃњрЃљрЃЏрЃЮрЃфрЃ«рЃљрЃЊрЃћрЃЉрЃљ
  pinMode(transistorPin, OUTPUT);
  pinMode(redPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  digitalWrite(transistorPin, 1);// P рЃљрЃарЃ«рЃўрЃљрЃюрЃў рЃбрЃарЃљрЃюрЃќрЃўрЃАрЃбрЃЮрЃарЃўрЃА рЃЕрЃљрЃЏрЃЎрЃћрЃбрЃќрЃћ рЃџрЃЮрЃњрЃўрЃЎрЃБрЃарЃў 1-рЃўрЃА рЃњрЃљрЃњрЃќрЃљрЃЋрЃюрЃљ, рЃарЃљрЃЊрЃњрЃљрЃю рЃЌрЃљрЃЋрЃЊрЃљрЃърЃўрЃарЃЋрЃћрЃџрЃљрЃЊ рЃАрЃЦрЃћрЃЏрЃљ рЃўрЃДрЃЮрЃА рЃњрЃљрЃЏрЃЮрЃарЃЌрЃБрЃџрЃў...
  for (byte count = 0; count < 5; count++) {// рЃЏрЃЌрЃЋрЃџрЃћрЃџрЃўрЃА clock рЃцрЃћрЃ«рЃќрЃћ рЃўрЃЏрЃърЃБрЃџрЃАрЃћрЃЉрЃўрЃА рЃњрЃљрЃњрЃќрЃљрЃЋрЃюрЃљ, рЃарЃљрЃЊрЃњрЃљрЃю рЃърЃарЃЮрЃњрЃарЃљрЃЏрЃБрЃџрЃў рЃЎрЃЮрЃЊрЃўрЃА рЃЏрЃАрЃЋрЃџрЃћрЃџрЃЮрЃЉрЃўрЃА рЃЊрЃљрЃгрЃДрЃћрЃЉрЃўрЃАрЃљрЃА, рЃърЃўрЃарЃЋрЃћрЃџрЃў 7-рЃАрЃћрЃњрЃЏрЃћрЃюрЃбрЃљ рЃўрЃДрЃЮрЃА рЃљрЃюрЃЌрЃћрЃЉрЃБрЃџрЃў
    digitalWrite(CLK, 1);
    digitalWrite(CLK, 0);
  }
  fullMatrix(0);// рЃерЃБрЃЦрЃЊрЃўрЃЮрЃЊрЃБрЃа рЃгрЃћрЃарЃбрЃўрЃџрЃЮрЃЋрЃљрЃюрЃў рЃЏрЃљрЃбрЃарЃўрЃфрЃўрЃА рЃАрЃарЃБрЃџрЃљрЃЊ рЃЕрЃљрЃЦрЃарЃЮрЃЉрЃљ
  // RTC рЃАрЃљрЃљрЃЌрЃўрЃА рЃЏрЃЮрЃЊрЃБрЃџрЃўрЃА SQW рЃърЃўрЃюрЃўрЃА рЃарЃћрЃЪрЃўрЃЏрЃўрЃА рЃЊрЃљрЃДрЃћрЃюрЃћрЃЉрЃљ "RTC_SQW_PIN_MODE" рЃЏрЃБрЃЊрЃЏрЃўрЃЋрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ, рЃЌрЃБ рЃљрЃЏрЃЪрЃљрЃЏрЃўрЃюрЃЊрЃћрЃџрЃў рЃарЃћрЃЪрЃўрЃЏрЃў рЃљрЃа рЃљрЃарЃўрЃА рЃљрЃдрЃюрЃўрЃерЃюрЃБрЃџ рЃЏрЃБрЃЊрЃЏрЃўрЃЋрЃљрЃерЃў рЃљрЃарЃАрЃћрЃЉрЃБрЃџрЃў рЃарЃћрЃЪрЃўрЃЏрЃў
  if (rtc.readSqwPinMode() != RTC_SQW_PIN_MODE)  {
    rtc.writeSqwPinMode(RTC_SQW_PIN_MODE);
  }
  attachInterrupt(digitalPinToInterrupt(INTERRUPT_PIN), timeChanged_ISR, RISING);// рЃгрЃДрЃЋрЃћрЃбрЃљ (interrupt) рЃљрЃдрЃўрЃФрЃЋрЃарЃћрЃЉрЃљ рЃЊрЃљ рЃерЃћрЃАрЃарЃБрЃџрЃЊрЃћрЃЉрЃљ "timeChanged_ISR" рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ, рЃарЃЮрЃфрЃљ "INTERRUPT_PIN" рЃЏрЃБрЃЊрЃЏрЃўрЃЋрЃљрЃерЃў рЃљрЃарЃАрЃћрЃЉрЃБрЃџрЃў рЃарЃўрЃфрЃ«рЃЋрЃўрЃА рЃЏрЃЦрЃЮрЃюрЃћ рЃюрЃЮрЃЏрЃарЃўрЃА рЃфрЃўрЃцрЃарЃБрЃџ рЃърЃўрЃюрЃќрЃћ рЃЏрЃЮрЃ«рЃЊрЃћрЃЉрЃљ рЃфрЃЋрЃџрЃўрЃџрЃћрЃЉрЃљ рЃџрЃЮрЃњрЃўрЃЎрЃБрЃарЃў 0-рЃЊрЃљрЃю рЃџрЃЮрЃњрЃўрЃЎрЃБрЃа 1-рЃќрЃћ
}

void loop() {
  loopFunction();// "loopFunction" рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃњрЃљрЃЏрЃЮрЃФрЃљрЃ«рЃћрЃЉрЃљ
  if (dateScrollEnabled)  {
    scrollDate(day, month, year, 100);
  }
  else if (countDown) {
    matrixDigit((60 - second) % 10);
  }
  else if (digitZeroDissapearEnabled) {
    randomDissapearDigitZero();
    digitZeroDissapearEnabled = 0;
  }
  else if (newYearScrollEnabled) {
    scrollText(newYear, 33, 100);
  }
  else if (snowEnabled) {
    scrollCharsFromTop(snowflake, 11, 100, snowMode);
  }
  else if (matrixLinesEnabled) {
    matrixLines();
  }
  else if (matrixSquaresEnabled) {
    matrixSquares();
  }
  else if (matrixDotsEnabled) {
    matrixDots();
  }
  else if (fallingDotsEnabled) {
    matrixFallingDotsOnInclinedPlane();
  }
  else if (matrixSmileEnabled) {
    symbolMatrix(smile);
  }
  else if (matrixJumpingSmileEnabled) {
    matrixJumpSymbol(smile, 50);
  }
  else if (fullMatrixScrollEnabled) {
    fullMatrixScroll();
  }
  else if (matrix_UGLIMES_enabled) {
    scrollSingle(smile, 100);
    scrollText(limes, 10, 100);
    scrollText(limes_geo, 13, 100);
    scrollSingle(uglimes_icon, 100);
  }
}